using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace FeatureFlag.Management.Firebase
{
    [Generator]
    public class RemoteConfigDefaultValueGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUGGENERATOR
            if (!Debugger.IsAttached)
                Debugger.Launch();
#endif 
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxReceiver is SyntaxReceiver receiver))
                return;

            var properties = receiver.GetProperties((s) => context.Compilation.GetSemanticModel(s));
            if (!(properties?.Count > 0))
                return;

            var classSource = ProcessClass(properties, context);
            context.AddSource("RemoteConfigDefaultValues.cs", SourceText.From(classSource, Encoding.UTF8));
        }

        private string ProcessClass(List<IPropertySymbol> properties, GeneratorExecutionContext context)
        {
            var defaultValueAttributeSymbol = context.Compilation.GetTypeByMetadataName("System.ComponentModel.DefaultValueAttribute");
            var nameAttributeSymbol = context.Compilation.GetTypeByMetadataName("System.ComponentModel.DisplayNameAttribute");
            var source = new StringBuilder($@"
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace FeatureFlag.Management.Firebase
{{
    public static class RemoteConfig
    {{

        public static Dictionary<string, object> DefaultValues = new Dictionary<string, object>()
        {{");

            source.AppendLine(string.Empty);

            for (var i = 0; i < properties.Count; i++)
            {
                var property = properties[i];
                var isLast = i == properties.Count - 1;
                source.AppendLine($@"           {{ ""{GetPropertyName(property, nameAttributeSymbol)}"", {GetDefaultValue(property, defaultValueAttributeSymbol)} }}{(isLast ? string.Empty : ",")}");
            }

            source.Append(@"
        };
    }
}
");

            return source.ToString();
        }

        private string GetPropertyName(IPropertySymbol property, ISymbol attributeSymbol)
        {
            var attributeData = property.GetAttributes().FirstOrDefault(ad => ad.AttributeClass.Equals(attributeSymbol, SymbolEqualityComparer.Default));
            var overridenValueOpt = attributeData?.ConstructorArguments.FirstOrDefault().Value;

            if (overridenValueOpt != null)
                return overridenValueOpt.ToString();

            return property.Name;
        }

        private string GetDefaultValue(IPropertySymbol property, ISymbol attributeSymbol)
        {
            var attributeData = property.GetAttributes().FirstOrDefault(ad => ad.AttributeClass.Equals(attributeSymbol, SymbolEqualityComparer.Default));
            var overridenValueOpt = attributeData?.ConstructorArguments.FirstOrDefault().Value;
            var propertyType = property.Type.ToString();

            if (overridenValueOpt != null)
            {
                var propertyValue = overridenValueOpt.ToString();

                if (IsBoolean(propertyType))
                    return propertyValue.ToLowerInvariant();
                else if (IsNumber(propertyType))
                    return propertyValue;
                else
                    return $"\"{propertyValue.Replace("\"", "\\\"")}\"";
            }

            return $"default({(IsNumber(propertyType) || IsBoolean(propertyType) ? propertyType : "string")})";
        }

        private static bool IsBoolean(string propertyType) =>
            propertyType == "bool";

        private static bool IsNumber(string propertyType) =>
            propertyType == "double" || propertyType == "long" || propertyType == "int";
    }
}
